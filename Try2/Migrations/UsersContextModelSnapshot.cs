// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Try2.Context;

#nullable disable

namespace Try2.Migrations
{
    [DbContext(typeof(UsersContext))]
    partial class UsersContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Try2.Context.Automobile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("BrandId")
                        .HasColumnType("integer");

                    b.Property<string>("GosNumber")
                        .HasColumnType("text");

                    b.Property<int>("LoadCapacity")
                        .HasColumnType("integer");

                    b.Property<int>("Mileage")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Purpose")
                        .HasColumnType("text");

                    b.Property<DateTime>("YearOfIssue")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("YearOfRepair")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.ToTable("Automobiles");
                });

            modelBuilder.Entity("Try2.Context.Bank", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Banks");
                });

            modelBuilder.Entity("Try2.Context.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Brands");
                });

            modelBuilder.Entity("Try2.Context.Cargo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<decimal>("InsuranceValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("OrderId")
                        .HasColumnType("integer");

                    b.Property<int?>("UnitId")
                        .HasColumnType("integer");

                    b.Property<int>("Weight")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("UnitId");

                    b.ToTable("Cargos");
                });

            modelBuilder.Entity("Try2.Context.Checking_account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("BankId")
                        .HasColumnType("integer");

                    b.Property<string>("Check")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BankId");

                    b.ToTable("Checking_Accounts");
                });

            modelBuilder.Entity("Try2.Context.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("Checking_AccountId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DataOfIssue")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Inn")
                        .HasColumnType("text");

                    b.Property<bool>("IsPhysical")
                        .HasColumnType("boolean");

                    b.Property<string>("IssuedBy")
                        .HasColumnType("text");

                    b.Property<string>("LegalAdress")
                        .HasColumnType("text");

                    b.Property<string>("LegalPersonName")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<string>("SeriesAndNumberPass")
                        .HasColumnType("text");

                    b.Property<string>("Surname")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Checking_AccountId");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("Try2.Context.Crew", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Crews");
                });

            modelBuilder.Entity("Try2.Context.Driver", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<int?>("ClassId")
                        .HasColumnType("integer");

                    b.Property<int?>("CrewId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Surname")
                        .HasColumnType("text");

                    b.Property<string>("WorkExperience")
                        .HasColumnType("text");

                    b.Property<DateTime>("YearOfBirth")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ClassId");

                    b.HasIndex("CrewId");

                    b.ToTable("Drivers");
                });

            modelBuilder.Entity("Try2.Context.DriverCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("DriverCategories");
                });

            modelBuilder.Entity("Try2.Context.DriverClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("DriverClasses");
                });

            modelBuilder.Entity("Try2.Context.Flight", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ArrivalDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("AutomobileId")
                        .HasColumnType("integer");

                    b.Property<int?>("CrewId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AutomobileId");

                    b.HasIndex("CrewId");

                    b.ToTable("Flights");
                });

            modelBuilder.Entity("Try2.Context.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("ClientId")
                        .HasColumnType("integer");

                    b.Property<int?>("FlightId")
                        .HasColumnType("integer");

                    b.Property<string>("LoadingAddress")
                        .HasColumnType("text");

                    b.Property<decimal>("OrderCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("OrderData")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("RouteLength")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UnloadingAddress")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("FlightId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Try2.Context.Right", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("D")
                        .HasColumnType("boolean");

                    b.Property<bool>("E")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("R")
                        .HasColumnType("boolean");

                    b.Property<bool>("W")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("Right");
                });

            modelBuilder.Entity("Try2.Context.Structure", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("DLLName")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("ParentStructureId")
                        .HasColumnType("integer");

                    b.Property<string>("function")
                        .HasColumnType("text");

                    b.Property<int>("number")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ParentStructureId");

                    b.ToTable("Structures");
                });

            modelBuilder.Entity("Try2.Context.Unit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Units");
                });

            modelBuilder.Entity("Try2.Context.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<int?>("RightId")
                        .HasColumnType("integer");

                    b.Property<string>("Surname")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RightId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Try2.Context.Automobile", b =>
                {
                    b.HasOne("Try2.Context.Brand", "Brand")
                        .WithMany("Automobiles")
                        .HasForeignKey("BrandId");

                    b.Navigation("Brand");
                });

            modelBuilder.Entity("Try2.Context.Cargo", b =>
                {
                    b.HasOne("Try2.Context.Order", "Order")
                        .WithMany("Cargos")
                        .HasForeignKey("OrderId");

                    b.HasOne("Try2.Context.Unit", "Unit")
                        .WithMany("Cargos")
                        .HasForeignKey("UnitId");

                    b.Navigation("Order");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("Try2.Context.Checking_account", b =>
                {
                    b.HasOne("Try2.Context.Bank", "Bank")
                        .WithMany("_accounts")
                        .HasForeignKey("BankId");

                    b.Navigation("Bank");
                });

            modelBuilder.Entity("Try2.Context.Client", b =>
                {
                    b.HasOne("Try2.Context.Checking_account", "Checking_Account")
                        .WithMany("Clients")
                        .HasForeignKey("Checking_AccountId");

                    b.Navigation("Checking_Account");
                });

            modelBuilder.Entity("Try2.Context.Driver", b =>
                {
                    b.HasOne("Try2.Context.DriverCategory", "Category")
                        .WithMany("Drivers")
                        .HasForeignKey("CategoryId");

                    b.HasOne("Try2.Context.DriverClass", "Class")
                        .WithMany("Drivers")
                        .HasForeignKey("ClassId");

                    b.HasOne("Try2.Context.Crew", "Crew")
                        .WithMany("Drivers")
                        .HasForeignKey("CrewId");

                    b.Navigation("Category");

                    b.Navigation("Class");

                    b.Navigation("Crew");
                });

            modelBuilder.Entity("Try2.Context.Flight", b =>
                {
                    b.HasOne("Try2.Context.Automobile", "Automobile")
                        .WithMany("Flights")
                        .HasForeignKey("AutomobileId");

                    b.HasOne("Try2.Context.Crew", "Crew")
                        .WithMany("Flights")
                        .HasForeignKey("CrewId");

                    b.Navigation("Automobile");

                    b.Navigation("Crew");
                });

            modelBuilder.Entity("Try2.Context.Order", b =>
                {
                    b.HasOne("Try2.Context.Client", "Client")
                        .WithMany("Orders")
                        .HasForeignKey("ClientId");

                    b.HasOne("Try2.Context.Flight", "Flight")
                        .WithMany()
                        .HasForeignKey("FlightId");

                    b.Navigation("Client");

                    b.Navigation("Flight");
                });

            modelBuilder.Entity("Try2.Context.Structure", b =>
                {
                    b.HasOne("Try2.Context.Structure", "ParentStructure")
                        .WithMany()
                        .HasForeignKey("ParentStructureId");

                    b.Navigation("ParentStructure");
                });

            modelBuilder.Entity("Try2.Context.User", b =>
                {
                    b.HasOne("Try2.Context.Right", "Right")
                        .WithMany("Users")
                        .HasForeignKey("RightId");

                    b.Navigation("Right");
                });

            modelBuilder.Entity("Try2.Context.Automobile", b =>
                {
                    b.Navigation("Flights");
                });

            modelBuilder.Entity("Try2.Context.Bank", b =>
                {
                    b.Navigation("_accounts");
                });

            modelBuilder.Entity("Try2.Context.Brand", b =>
                {
                    b.Navigation("Automobiles");
                });

            modelBuilder.Entity("Try2.Context.Checking_account", b =>
                {
                    b.Navigation("Clients");
                });

            modelBuilder.Entity("Try2.Context.Client", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Try2.Context.Crew", b =>
                {
                    b.Navigation("Drivers");

                    b.Navigation("Flights");
                });

            modelBuilder.Entity("Try2.Context.DriverCategory", b =>
                {
                    b.Navigation("Drivers");
                });

            modelBuilder.Entity("Try2.Context.DriverClass", b =>
                {
                    b.Navigation("Drivers");
                });

            modelBuilder.Entity("Try2.Context.Order", b =>
                {
                    b.Navigation("Cargos");
                });

            modelBuilder.Entity("Try2.Context.Right", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Try2.Context.Unit", b =>
                {
                    b.Navigation("Cargos");
                });
#pragma warning restore 612, 618
        }
    }
}
